Reference Video Guide: https://youtu.be/N--e1O5SqPw

https://MediaStack.Guide
https://github.com/geekau/mediastack (Original Project)
https://github.com/abd-almofleh/media-stack (Enhanced Management System)
https://docs.docker.com/engine/install/ubuntu/
https://github.com/winsw/winsw

########################################################################################
#                     MEDIASTACK - ENHANCED MANAGEMENT SYSTEM                        #
#                    Complete Installation Guide for Windows 11                       #
########################################################################################

This guide shows you how to install MediaStack with the Enhanced Management System
that provides unified control, health monitoring, and selective service management.

Original MediaStack by: geekau (https://github.com/geekau/mediastack)
Enhanced Management by: abd-almofleh (https://github.com/abd-almofleh/media-stack)




#######################################################################################
#     INSTALL VIRTUALISATION PRE-REQUISITES AND WINDOWS SUBSYSTEM FOR LINUX (WSL)     #
#######################################################################################

# OPEN COMMAND PROMPT (ADMINISTRATOR)

dism /online /enable-feature  /featurename:microsoft-windows-subsystem-linux /all /norestart
dism /online /enable-feature  /featurename:virtualmachineplatform /all /norestart
dism /online /enable-feature  /featurename:hypervisorplatform /all /norestart
dism /online /disable-feature /featurename:microsoft-hyper-v /norestart

wsl --install
wsl --update
wsl --set-default-version 2

shutdown /r /t 1


# OPEN COMMAND PROMPT (ADMINISTRATOR)

wsl --install -d ubuntu
wsl --status




#######################################################################################
#                 CREATE DOCKER USER AND UPDATE UBUNTU DISTRIBUTION                   #
#######################################################################################

# OPEN UBUNTU AND CREATE NEW USER

# Username: ubuntu
# Password: ubuntu

sudo apt clean all
sudo apt update
sudo apt dist-upgrade -y
sudo apt autoremove -y




#######################################################################################
#              INSTALL DOCKER USING OFFICIAL DOCUMENTATION AND REPOS                  #
#######################################################################################

# Google:    install docker ubuntu
# Or Goto:   https://docs.docker.com/engine/install/ubuntu/


# UNINSTALL OLD DOCKER VERSIONS
for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done


# UNINSTALL DOCKER ENGINE
sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras
sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd
sudo rm /etc/apt/sources.list.d/docker.list
sudo rm /etc/apt/keyrings/docker.asc


# ADD DOCKER'S OFFICIAL GPG KEY:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc


# ADD THE REPOSITORY TO APT SOURCES:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin




#######################################################################################
#              DELETE DOCKER IMAGES / CONTAINERS / NETWORKS / DOCKER CONFIG           #
#######################################################################################


sudo docker stop $(sudo docker ps -a -q)
sudo docker rm   $(sudo docker ps -a -q)
sudo docker container  prune -f
sudo docker image      prune -a -f
sudo docker volume     prune -f
sudo docker network    prune -f




#######################################################################################
#    CONFIGURATION VARIABLES / SETTINGS FOR THIS DEMO - CHANGE TO SUIT YOUR NEEDS     #
#######################################################################################

# This tutorial will show you how to set up the following folders

# FOLDER_FOR_MEDIA=/mnt/d/MediaStack/Media      We will store all media in this location
# FOLDER_FOR_DATA=/mnt/d/MediaStack/AppData     We will store all Docker configurations here

mkdir D:\MediaStack\Media
mkdir D:\MediaStack\AppData




#####################################################################################
#              INSTALL MEDIASTACK WITH ENHANCED MANAGEMENT SYSTEM                   #
#####################################################################################

# Clone the Enhanced MediaStack repository
cd /mnt/d/MediaStack
git clone https://github.com/abd-almofleh/media-stack.git AppData
cd AppData

# OR Download files manually from:
# Original: https://github.com/geekau/mediastack
# Enhanced: https://github.com/abd-almofleh/media-stack

# Edit docker-compose.env file with your settings
nano docker-compose.env

# Set your folder paths (update these to match your setup):
# FOLDER_FOR_MEDIA=/mnt/d/MediaStack/Media
# FOLDER_FOR_DATA=/mnt/d/MediaStack/AppData/data

#####################################################################################
#                    MEDIASTACK ENHANCED SETUP - ONE COMMAND!                       #
#####################################################################################

# The Enhanced Management System simplifies everything to just a few commands:

# 1. FIRST TIME SETUP (Creates directories, downloads images, starts all services)
./mediastack.sh setup
./mediastack.sh pull
./mediastack.sh start-all

# That's it! The enhanced system handles:
# ✅ Automatic directory creation with proper permissions
# ✅ Intelligent service startup (Gluetun first, then others)
# ✅ Error handling and progress feedback
# ✅ Colored output for easy reading

#####################################################################################
#                        ENHANCED MANAGEMENT COMMANDS                               #
#####################################################################################

# Check status of all services with health monitoring
./mediastack.sh status

# Advanced health check with HTTP testing
./mediastack.sh health

# View logs for specific service
./mediastack.sh logs jellyfin

# Individual service management
./mediastack.sh start prowlarr
./mediastack.sh stop radarr
./mediastack.sh restart jellyfin

# Bulk operations
./mediastack.sh start-all    # Start all services (Gluetun first)
./mediastack.sh stop-all     # Stop all services
./mediastack.sh restart-all  # Full restart with container recreation

# Service updates
./mediastack.sh update       # Pull latest images and restart services

# List all available services
./mediastack.sh list

# Get help
./mediastack.sh help

#####################################################################################
#                      SELECTIVE SERVICE MANAGEMENT (WHITELIST)                     #
#####################################################################################

# Create a whitelist to control which services are managed by bulk operations
echo "gluetun prowlarr radarr sonarr jellyfin qbittorrent" > services.whitelist

# Now bulk operations only affect whitelisted services:
./mediastack.sh start-all    # Only starts services in whitelist
./mediastack.sh restart-all  # Only restarts whitelisted services

# Individual commands still work on all services:
./mediastack.sh start plex   # Works regardless of whitelist

#####################################################################################
#                             WHAT THE ENHANCED SYSTEM PROVIDES                     #
#####################################################################################

# ✅ UNIFIED MANAGEMENT - Single script for all operations
# ✅ HEALTH MONITORING - Real HTTP health checks, not just container status
# ✅ SMART ORCHESTRATION - Gluetun dependency handling automatic
# ✅ SELECTIVE CONTROL - Whitelist system for managing specific services
# ✅ ERROR HANDLING - Robust error checking and user feedback
# ✅ ORGANIZED STRUCTURE - Clean separation of scripts, compose files, data
# ✅ COLORED OUTPUT - Easy-to-read status messages
# ✅ AUTOMATIC SETUP - Directory creation with proper permissions




#####################################################################################
#                AUTOMATED WSL WINDOWS SERVICE SETUP (RECOMMENDED)                  #
#####################################################################################

# The Enhanced MediaStack includes automated WSL service setup!

# OPTION 1: AUTOMATED SETUP (EASIEST - RECOMMENDED)
# ================================================

# 1. Navigate to the windows-service directory (in Windows Explorer)
# Location: D:\MediaStack\AppData\windows-service\

# 2. Right-click on "install-wsl-service.bat" 
# 3. Select "Run as administrator"

# The automated installer will:
# ✅ Download Windows Service Wrapper automatically
# ✅ Create proper service configuration
# ✅ Install WSL MediaStack service
# ✅ Configure automatic startup
# ✅ Provide easy management tools

# ✅ Install WSL Ubuntu Monitoring service
# ✅ Configure automatic startup

# 4. After installation, configure service credentials:
#    - Open Services (Win+R → services.msc)
#    - Find "WSL Ubuntu Monitoring Service"
#    - Right-click → Properties → Log On tab
#    - Select "This account" and enter your Windows username/password
#    - Your Windows account MUST have a password!

# 5. Use "manage-service.bat" for ongoing service management

#####################################################################################
#                    MANUAL WSL SERVICE SETUP (ADVANCED USERS)                      #
#####################################################################################

### WARNING - WSL must run with user account details that have a password ###

# If you prefer manual setup or the automated script doesn't work:

# Download Windows Service Wrapper - https://github.com/winsw/winsw/releases
# Copy WinSW-x64.exe to {YOUR_MEDIASTACK_DIR}\windows-service\ and rename "wsl-ubuntu-monitoring.exe"
# Create {YOUR_MEDIASTACK_DIR}\windows-service\wsl-ubuntu-monitoring.xml:

<service>
  <id>wsl-ubuntu-monitoring</id>
  <name>WSL Ubuntu Monitoring Service</name>
  <description>Monitors and maintains WSL Ubuntu instance for Docker operations. Ensures WSL stays active for container stacks and services.</description>
  <executable>C:\Program Files\WSL\wsl.exe</executable>
  <startarguments>-d ubuntu --exec /bin/bash -c "echo 'WSL Ubuntu monitoring service started' && while true; do sleep 30; done"</startarguments>
  <priority>Normal</priority>
  <stoptimeout>30 sec</stoptimeout>
  <stopparentprocessfirst>true</stopparentprocessfirst>
  <startmode>Automatic</startmode>
  <depend>Eventlog</depend>
  <waithint>30 sec</waithint>
  <sleeptime>1 sec</sleeptime>
  <log mode="roll">
    <sizeThreshold>10240</sizeThreshold>
    <keepFiles>8</keepFiles>
  </log>
</service>

# Install and start the service:
cd {YOUR_MEDIASTACK_DIR}\windows-service\
wsl-ubuntu-monitoring.exe install
# Configure service credentials in Services (services.msc)
wsl-ubuntu-monitoring.exe start

#####################################################################################
#                           WSL SERVICE BENEFITS                                    #
#####################################################################################

# ✅ AUTOMATIC STARTUP - WSL starts with Windows boot
# ✅ BACKGROUND OPERATION - Works without user login  
# ✅ DOCKER PERSISTENCE - Docker daemon stays active
# ✅ UNIVERSAL SUPPORT - Works for MediaStack and other Docker projects
# ✅ SERVICE MANAGEMENT - Standard Windows service controls
# ✅ LOGGING - Service logs for troubleshooting
# ✅ EASY MANAGEMENT - Batch scripts for common operations

# After setup and reboot, test with:
# ./mediastack.sh status
# ./mediastack.sh health


#####################################################################################
#                       UPDATING MEDIASTACK - ENHANCED METHOD                       #
#####################################################################################

# The Enhanced System makes updates simple and safe:

# Update all services to latest Docker images
./mediastack.sh update

# This single command:
# ✅ Downloads latest Docker images for all services
# ✅ Recreates containers with new images
# ✅ Handles Gluetun dependency automatically
# ✅ Preserves all data and configurations
# ✅ Provides progress feedback and error handling

# Alternative update methods:
./mediastack.sh pull        # Just download images, don't restart
./mediastack.sh restart-all # Restart all with existing images

# Update specific services only:
./mediastack.sh restart jellyfin
./mediastack.sh restart radarr

#####################################################################################
#                          MONITORING AND TROUBLESHOOTING                           #
#####################################################################################

# Check overall system status
./mediastack.sh status

# Advanced health check with HTTP testing
./mediastack.sh health
# Example output:
# ✅ gluetun: Running (VPN connected)
# ✅ prowlarr: Running + HTTP accessible (http://192.168.1.100:9696)
# ❌ radarr: Running but HTTP not accessible (port 7878)
# ⚠️  jellyfin: Container stopped

# View logs for troubleshooting
./mediastack.sh logs gluetun     # Check VPN connection
./mediastack.sh logs prowlarr    # Check indexer issues
./mediastack.sh logs jellyfin    # Check media server issues

# Check which services are configured
./mediastack.sh list

# Show current whitelist (if using selective management)
cat services.whitelist




#####################################################################################
#                               WHAT TO DO NEXT?                                    #
#####################################################################################

# 1. VERIFY YOUR INSTALLATION
./mediastack.sh health    # Check all services are running and accessible

# 2. ACCESS YOUR APPLICATIONS
# Import the bookmarks for applications into your web browser
# Access applications at: http://YOUR_SERVER_IP:PORT
# Example: http://192.168.1.100:9696 for Prowlarr

# 3. CONFIGURE YOUR MEDIA STACK
# Set up indexers in Prowlarr first
# Configure download clients (qBittorrent, SABnzbd)
# Set up media managers (*ARR applications)
# Configure media servers (Jellyfin/Plex)

# 4. OPTIONAL ENHANCEMENTS
# Set up Filebot for media organization:
./mediastack.sh logs filebot

# Configure selective service management:
echo "gluetun prowlarr radarr sonarr jellyfin" > services.whitelist

# 5. DAILY OPERATIONS
./mediastack.sh status      # Check system status
./mediastack.sh health      # Comprehensive health check
./mediastack.sh logs [app]  # Troubleshoot specific issues
./mediastack.sh update      # Keep services updated

#####################################################################################
#                              ENHANCED SYSTEM BENEFITS                             #
#####################################################################################

# OLD WAY (Manual):
# - 20+ individual docker compose commands
# - Manual dependency management (Gluetun first)
# - No health checking beyond container status
# - Complex update procedures
# - Error-prone bulk operations

# NEW WAY (Enhanced):
# - Single command operations: ./mediastack.sh start-all
# - Automatic dependency handling
# - Real HTTP health checks
# - Simple updates: ./mediastack.sh update
# - Selective service management with whitelist
# - Colored output and progress feedback
# - Robust error handling

#####################################################################################
#                              CONTINUE LEARNING                                    #
#####################################################################################

# Original MediaStack Documentation: https://github.com/geekau/mediastack
# Enhanced Management Documentation: https://github.com/abd-almofleh/media-stack
# MediaStack Community: https://MediaStack.Guide
# Support Forums: https://www.reddit.com/r/MediaStack/

# For VPN setup, remote access, and advanced configurations,
# see the complete documentation in the original repository.




#####################################################################################
#                                   THE END !                                       #
#####################################################################################